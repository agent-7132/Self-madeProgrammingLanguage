# 阶段1：构建环境
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 as builder

# 安全基础配置
RUN groupadd -r compiler && useradd -r -g compiler compiler \
    && mkdir -p /build /usr/local/llvm \
    && chown -R compiler:compiler /build

USER compiler
WORKDIR /build

# 安装系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget gnupg software-properties-common build-essential cmake git \
    cuda-toolkit-12-2 nvidia-driver-535 libcudnn8 libavx512-dev \
    gcc-12-plugin-dev valgrind python3.10-dev \
    && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
    && echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list.d/llvm.list \
    && apt-get update && apt-get install -y clang-18 llvm-18 qiskit-symbex qsharp \
    libdilithium3 libopenblas-dev openmpi-bin libopenmpi-dev intel-mkl-2023.2 \
    cython onnxruntime locust prometheus hwloc numactl \
    && rm -rf /var/lib/apt/lists/* && apt-get clean

# 构建LLVM量子扩展
RUN git clone --depth 1 --branch quantum-18 https://github.com/llvm/llvm-project.git \
    && mkdir llvm-build && cd llvm-build \
    && cmake -DLLVM_ENABLE_PROJECTS="clang;mlir" \
             -DCMAKE_INSTALL_PREFIX=/usr/local/llvm \
             ../llvm-project/llvm \
    && make -j$(nproc) install

# 安装Python依赖
COPY quantum-compiler/requirements.txt .
RUN pip3 install --user -r requirements.txt

# 编译核心组件
COPY quantum-compiler/src /build/src
RUN mkdir -p /build/src/core/quantum_ir/build \
    && cd /build/src/core/quantum_ir/build \
    && cmake -DQUANTUM_BACKEND=CUDA .. \
    && make -j$(nproc)

# 阶段2：生产镜像
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

# 安全运行时配置
RUN groupadd -r compiler && useradd -r -g compiler compiler \
    && mkdir -p /opt/compiler/{bin,lib,config} \
    && chown -R compiler:compiler /opt/compiler

COPY --from=builder --chown=compiler:compiler \
    /root/.local/lib/python3.10/site-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder --chown=compiler:compiler \
    /usr/local/llvm /opt/compiler/llvm
COPY --from=builder --chown=compiler:compiler \
    /build/src/core/quantum_ir/build/libquantum.so /opt/compiler/lib/
COPY quantum-compiler/src /opt/compiler/src
COPY quantum-compiler/config /opt/compiler/config

# 配置环境
ENV PATH="/opt/compiler/bin:/opt/compiler/llvm/bin:$PATH"
ENV LD_LIBRARY_PATH="/opt/compiler/lib:$LD_LIBRARY_PATH"
ENV PYTHONPATH="/opt/compiler/src:$PYTHONPATH"

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s \
    CMD /opt/compiler/src/cli/main.py healthcheck

# 保留phase4内容
COPY phase4 /phase4
ENV PYTHONPATH="/phase4/math:$PYTHONPATH"

USER compiler
WORKDIR /workspace
ENTRYPOINT ["/opt/compiler/src/cli/main.py"]
